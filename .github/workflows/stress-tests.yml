
name: Stress Tests

on:
  push:
    branches:
      - main # Or your primary branch name
  pull_request:
    types: [opened, synchronize]
    branches:
      - main # Or your primary branch name
  workflow_dispatch: # Retain manual triggering

concurrency:
  group: |
    ${{ github.workflow }}-${{ github.workflow_ref }}-${{
      github.event_name == 'pull_request' 
      && github.event.pull_request.number 
      || github.ref_name }}
  cancel-in-progress: true

env:
  SIMULATOR_NUM_MESSAGES: "1000000" # 1 million messages for optimized stress testing
  MAX_ALLOWED_TIME_MS: "300000" # 5 minutes timeout for processing 1M messages

jobs:
  run-stress-tests:
    name: Run Flink.NET Stress Tests
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: pwsh

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure Docker is running
        run: docker info

      - name: Set up .NET 8.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install .NET Aspire Workload
        run: dotnet workload install aspire

      - name: Restore .NET Workloads for Solutions
        run: |
          dotnet workload restore FlinkDotNet/FlinkDotNet.sln
          dotnet workload restore FlinkDotNetAspire/FlinkDotNetAspire.sln
          dotnet workload restore FlinkDotNet.WebUI/FlinkDotNet.WebUI.sln

      - name: Build Solutions (including Verifier)
        run: |
          Write-Host "Building FlinkDotNet solution (dependency)..."
          Push-Location FlinkDotNet
          dotnet build FlinkDotNet.sln --configuration Release
          Pop-Location
          
          Write-Host "Building FlinkDotNetAspire solution..."
          Push-Location FlinkDotNetAspire
          dotnet build FlinkDotNetAspire.sln --configuration Release
          Pop-Location

      - name: Run Manual Stress Test (Following Documentation)
        timeout-minutes: 10
        run: |
          Write-Host "=== FLINK.NET Stress Test - Manual Approach ===" -ForegroundColor Cyan
          Write-Host "Following docs/wiki/Stress-Tests-Overview.md manual process" -ForegroundColor White
          
          # Set environment variables for stress testing
          $env:SIMULATOR_NUM_MESSAGES='${{ env.SIMULATOR_NUM_MESSAGES }}'
          $env:ASPIRE_ALLOW_UNSECURED_TRANSPORT='true'
          $env:DOTNET_ENVIRONMENT='Development'
          $env:CI='true'  # Enable direct consumption mode for reliability
          
          Write-Host "Environment configuration:" -ForegroundColor Gray
          Write-Host "  SIMULATOR_NUM_MESSAGES: $env:SIMULATOR_NUM_MESSAGES" -ForegroundColor Gray
          Write-Host "  CI: $env:CI (enables direct consumption mode)" -ForegroundColor Gray
          
          # Step 1: Start AppHost (Open FlinkDotNetAspire.sln > F5)
          Write-Host "`n=== Step 1: Start AppHost ===" -ForegroundColor Yellow
          $processArgs = @(
            'run', '--no-build', '--configuration', 'Release',
            '--project', 'FlinkDotNetAspire/FlinkDotNetAspire.AppHost.AppHost/FlinkDotNetAspire.AppHost.AppHost.csproj'
          )
          
          $proc = Start-Process -FilePath 'dotnet' -ArgumentList $processArgs -RedirectStandardOutput "apphost.out.log" -RedirectStandardError "apphost.err.log" -NoNewWindow -PassThru
          $proc.Id | Out-File apphost.pid -Encoding utf8
          Write-Host "✅ AppHost started with PID: $($proc.Id)" -ForegroundColor Green
          
          # Step 2: Wait all the services running (Redis, Kafka, FlinkJobSimulator)
          Write-Host "`n=== Step 2: Wait for Services ===" -ForegroundColor Yellow
          Write-Host "Waiting 60 seconds for services to start..." -ForegroundColor White
          Start-Sleep -Seconds 60
          
          # Discover ports
          Write-Host "Discovering Aspire container ports..." -ForegroundColor White
          & ./scripts/discover-aspire-ports.ps1
          if ($LASTEXITCODE -ne 0) { throw "Port discovery failed" }
          
          Write-Host "✅ Services discovered:" -ForegroundColor Green
          Write-Host "  Redis: $env:DOTNET_REDIS_URL" -ForegroundColor Gray
          Write-Host "  Kafka: $env:DOTNET_KAFKA_BOOTSTRAP_SERVERS" -ForegroundColor Gray
          
          # Step 3: cd scripts > Run .\produce-1-million-messages.ps1
          Write-Host "`n=== Step 3: Produce Messages ===" -ForegroundColor Yellow
          Push-Location scripts
          try {
            & "./produce-1-million-messages.ps1" -MessageCount $env:SIMULATOR_NUM_MESSAGES
            if ($LASTEXITCODE -ne 0) { throw "Message production failed" }
            Write-Host "✅ Message production completed" -ForegroundColor Green
          } finally {
            Pop-Location
          }
          
          # Step 4: Run wait-for-flinkjobsimulator-completion.ps1
          Write-Host "`n=== Step 4: Wait for Completion ===" -ForegroundColor Yellow
          Push-Location scripts
          try {
            & "./wait-for-flinkjobsimulator-completion.ps1" -ExpectedMessages $env:SIMULATOR_NUM_MESSAGES
            if ($LASTEXITCODE -ne 0) { throw "FlinkJobSimulator completion failed" }
            Write-Host "✅ FlinkJobSimulator completed successfully!" -ForegroundColor Green
          } finally {
            Pop-Location
          }
          
          Write-Host "`n=== STRESS TEST RESULT: ✅ PASSED ===" -ForegroundColor Green
          Write-Host "Successfully processed $env:SIMULATOR_NUM_MESSAGES messages!" -ForegroundColor Green

      - name: Print Key Logs for Debugging
        if: always()
        run: |
          Write-Host "`n=== AppHost Logs ===" -ForegroundColor Yellow
          if (Test-Path "apphost.out.log") {
            Write-Host "AppHost Output (last 20 lines):" -ForegroundColor Cyan
            Get-Content "apphost.out.log" -Tail 20 | ForEach-Object { Write-Host $_ }
          }
          
          if (Test-Path "apphost.err.log") {
            Write-Host "AppHost Errors:" -ForegroundColor Red  
            Get-Content "apphost.err.log" | ForEach-Object { Write-Host $_ }
          }

      - name: Cleanup
        if: always()
        run: |
          Write-Host "`n=== Cleanup ===" -ForegroundColor Yellow
          
          # Stop AppHost if still running
          if (Test-Path "apphost.pid") {
            $pid = Get-Content "apphost.pid"
            Write-Host "Stopping AppHost process $pid..."
            $process = Get-Process -Id $pid -ErrorAction SilentlyContinue
            if ($process) {
              Stop-Process -Id $pid -Force -ErrorAction SilentlyContinue
            }
          }
          
          # Clean up log files
          Remove-Item -Path "apphost.*.log", "apphost.pid" -ErrorAction SilentlyContinue
          
          Write-Host "✅ Cleanup completed" -ForegroundColor Green
