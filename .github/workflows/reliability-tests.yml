name: Reliability Tests

on:
  push:
    branches:
      - main # Or your primary branch name
  pull_request:
    types: [opened, synchronize]
    branches:
      - main # Or your primary branch name
  workflow_dispatch: # Retain manual triggering

concurrency:
  group: |
    ${{ github.workflow }}-${{ github.workflow_ref }}-${{
      github.event_name == 'pull_request' 
      && github.event.pull_request.number 
      || github.ref_name }}
  cancel-in-progress: true

env:
  FLINKDOTNET_STANDARD_TEST_MESSAGES: "1000" # Reduced message count for faster CI execution (was 10000)
  MAX_ALLOWED_TIME_MS: "300000" # 5 minutes timeout matching stress tests

jobs:
  run-reliability-tests:
    name: Run Flink.Net Reliability Tests with Kafka Best Practices
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: pwsh # Changed to PowerShell for consistency with stress tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure Docker is running
        run: docker info

      - name: Set up .NET 8.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install .NET Aspire Workload
        run: dotnet workload install aspire

      - name: Restore .NET Workloads for Solutions
        run: |
          dotnet workload restore FlinkDotNet/FlinkDotNet.sln
          dotnet workload restore FlinkDotNetAspire/FlinkDotNetAspire.sln

      - name: Build Solutions
        run: |
          Write-Host "Building FlinkDotNet solution (dependency)..."
          Push-Location FlinkDotNet
          dotnet build FlinkDotNet.sln --configuration Release
          Pop-Location
          
          Write-Host "Building FlinkDotNetAspire solution..."
          Push-Location FlinkDotNetAspire
          dotnet build FlinkDotNetAspire.sln --configuration Release
          Pop-Location

      - name: Start Aspire Development Environment
        run: |
          Write-Host "üöÄ Starting Aspire development environment with Kafka best practices setup..." -ForegroundColor Green
          $env:SIMULATOR_NUM_MESSAGES = "${{ env.FLINKDOTNET_STANDARD_TEST_MESSAGES }}"
          $env:ASPIRE_ALLOW_UNSECURED_TRANSPORT = "true"
          
          # Create log files
          $outLogPath = "aspire.out.log"
          $errLogPath = "aspire.err.log"
          
          Write-Host "Starting AppHost with output logging to $outLogPath and $errLogPath"
          
          # Use Start-Process with file redirection (same pattern as stress tests)
          $processArgs = @(
            'run',
            '--no-build', 
            '--configuration', 'Release',
            '--project', 'FlinkDotNetAspire/FlinkDotNetAspire.AppHost.AppHost/FlinkDotNetAspire.AppHost.AppHost.csproj'
          )
          
          # Start the process with output redirection
          $proc = Start-Process -FilePath 'dotnet' -ArgumentList $processArgs -RedirectStandardOutput $outLogPath -RedirectStandardError $errLogPath -NoNewWindow -PassThru
          $proc.Id | Out-File aspire.pid -Encoding utf8
          
          Write-Host "Started Aspire AppHost with PID: $($proc.Id)"
          Write-Host "‚è≥ Waiting for Aspire environment to be fully ready..."
          Start-Sleep -Seconds 45 # Increased wait time for full initialization

      - name: Discover Aspire Container Ports
        run: |
          Write-Host "Discovering actual Aspire container ports after AppHost startup..."
          & ./scripts/discover-aspire-ports.ps1
          if ($LASTEXITCODE -ne 0) {
            Write-Host "‚ùå Port discovery failed with exit code: $LASTEXITCODE"
            exit 1
          }
          
          Write-Host "Current environment variables after discovery:"
          Write-Host "DOTNET_REDIS_URL: $env:DOTNET_REDIS_URL"
          Write-Host "DOTNET_KAFKA_BOOTSTRAP_SERVERS: $env:DOTNET_KAFKA_BOOTSTRAP_SERVERS"
          
          # Verify the environment variables were set
          if (-not $env:DOTNET_REDIS_URL) {
            Write-Host "‚ùå DOTNET_REDIS_URL not set by port discovery"
            exit 1
          }
          if (-not $env:DOTNET_KAFKA_BOOTSTRAP_SERVERS) {
            Write-Host "‚ùå DOTNET_KAFKA_BOOTSTRAP_SERVERS not set by port discovery"
            exit 1
          }
          Write-Host "‚úÖ Port discovery completed successfully"

      - name: Infrastructure Health Check
        env:
          DOTNET_ENVIRONMENT: "Development"
        run: |
          Write-Host "üß™ Running infrastructure health checks..."
          $verifierDll = "./FlinkDotNetAspire/IntegrationTestVerifier/bin/Release/net8.0/FlinkDotNet.IntegrationTestVerifier.dll"
          
          $maxAttempts = 5
          $delaySeconds = 10
          
          for ($attempt = 1; $attempt -le $maxAttempts; $attempt++) {
            Write-Host "`n--- Health check attempt $attempt/$maxAttempts ---"
            Write-Host "Starting health check at $(Get-Date -Format 'HH:mm:ss')..."
            
            & dotnet $verifierDll --health-check
            $healthExitCode = $LASTEXITCODE
            
            if ($healthExitCode -eq 0) {
              Write-Host "‚úÖ Health check PASSED on attempt $attempt" -ForegroundColor Green
              break
            }
            
            Write-Host "‚ùå Health check FAILED on attempt $attempt (exit code: $healthExitCode)" -ForegroundColor Red
            
            if ($attempt -lt $maxAttempts) {
              Write-Host "Waiting $delaySeconds seconds before retry..." -ForegroundColor Yellow
              Start-Sleep -Seconds $delaySeconds
            } else {
              Write-Host "‚ùå Max health check attempts ($maxAttempts) reached. Health checks failed." -ForegroundColor Red
              exit 1
            }
          }

      - name: Run Flink.Net Standard Reliability Test with Aspire Infrastructure
        env:
          FLINKDOTNET_STANDARD_TEST_MESSAGES: ${{ env.FLINKDOTNET_STANDARD_TEST_MESSAGES }}
          MAX_ALLOWED_TIME_MS: ${{ env.MAX_ALLOWED_TIME_MS }}
          DOTNET_ENVIRONMENT: "Development"
        run: |
          Write-Host "üß™ Running Flink.Net Standard Reliability Test with ${{ env.FLINKDOTNET_STANDARD_TEST_MESSAGES }} messages..."
          Write-Host "üìä Using Aspire-managed Kafka and Redis infrastructure"
          Write-Host "‚è±Ô∏è Maximum allowed time: ${{ env.MAX_ALLOWED_TIME_MS }}ms"
          
          Push-Location FlinkDotNetAspire/FlinkDotnetStandardReliabilityTest
          dotnet test --configuration Release --logger "console;verbosity=detailed" --no-build
          $testExitCode = $LASTEXITCODE
          Pop-Location
          
          if ($testExitCode -ne 0) {
            Write-Host "‚ùå Flink.Net Standard Reliability Test FAILED." -ForegroundColor Red
            exit 1
          }
          
          Write-Host "‚úÖ Flink.Net Standard Reliability Test PASSED with Aspire infrastructure." -ForegroundColor Green

      - name: Stop Aspire Environment
        if: always()
        run: |
          Write-Host "üõë Stopping Aspire environment..." -ForegroundColor Yellow
          
          if (Test-Path aspire.pid) {
            $apphostPid = Get-Content aspire.pid
            Write-Host "Stopping AppHost with PID $apphostPid"
            
            $process = Get-Process -Id $apphostPid -ErrorAction SilentlyContinue
            if ($process) {
              Write-Host "Process is running, stopping it..."
              Stop-Process -Id $apphostPid -Force -ErrorAction SilentlyContinue
              Start-Sleep -Seconds 3
            } else {
              Write-Host "Process was already stopped."
            }
            
            Remove-Item aspire.pid -ErrorAction SilentlyContinue
          } else {
            Write-Host "No AppHost PID file found."
          }
          
          # Show log content for debugging
          Write-Host "`n=== ASPIRE OUTPUT LOG ===" -ForegroundColor Cyan
          if (Test-Path aspire.out.log) {
            Get-Content aspire.out.log -ErrorAction SilentlyContinue | Select-Object -Last 50
          } else {
            Write-Host "No output log found"
          }
          
          Write-Host "`n=== ASPIRE ERROR LOG ===" -ForegroundColor Cyan
          if (Test-Path aspire.err.log) {
            Get-Content aspire.err.log -ErrorAction SilentlyContinue | Select-Object -Last 50
          } else {
            Write-Host "No error log found"
          }
          
          Write-Host "‚úÖ Aspire environment cleanup complete." -ForegroundColor Green
