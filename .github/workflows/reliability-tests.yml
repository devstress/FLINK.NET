name: Reliability Tests

on:
  push:
    branches:
      - main # Or your primary branch name
  pull_request:
    types: [opened, synchronize]
    branches:
      - main # Or your primary branch name
  workflow_dispatch: # Retain manual triggering

concurrency:
  group: |
    ${{ github.workflow }}-${{ github.workflow_ref }}-${{
      github.event_name == 'pull_request' 
      && github.event.pull_request.number 
      || github.ref_name }}
  cancel-in-progress: true

env:
  FLINKDOTNET_STANDARD_TEST_MESSAGES: "10000" # Fast reliability test message count for CI (reduced from 10M default)

jobs:
  run-reliability-tests:
    name: Run Flink.Net Reliability Tests with Kafka Best Practices
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure Docker is running
        run: docker info

      - name: Set up .NET 8.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install .NET Aspire Workload
        run: dotnet workload install aspire

      - name: Restore .NET Workloads for Solutions
        run: |
          dotnet workload restore FlinkDotNet/FlinkDotNet.sln
          dotnet workload restore FlinkDotNetAspire/FlinkDotNetAspire.sln

      - name: Build Solutions
        run: |
          echo "Building FlinkDotNet solution (dependency)..."
          cd FlinkDotNet
          dotnet build FlinkDotNet.sln --configuration Release
          cd ..
          
          echo "Building FlinkDotNetAspire solution..."
          cd FlinkDotNetAspire
          dotnet build FlinkDotNetAspire.sln --configuration Release
          cd ..

      - name: Start Aspire Development Environment
        run: |
          echo "🚀 Starting Aspire development environment with Kafka best practices setup..."
          cd FlinkDotNetAspire/FlinkDotNetAspire.AppHost.AppHost
          
          # Start Aspire in the background
          nohup dotnet run --configuration Release > aspire.log 2>&1 &
          ASPIRE_PID=$!
          echo $ASPIRE_PID > aspire.pid
          
          echo "⏳ Waiting for Aspire environment to be fully ready..."
          sleep 30
          
          echo "📊 Checking Aspire services..."
          # Check if Aspire is running
          if ps -p $ASPIRE_PID > /dev/null; then
            echo "✅ Aspire is running (PID: $ASPIRE_PID)"
          else
            echo "❌ Aspire failed to start"
            cat aspire.log
            exit 1
          fi
          
          cd ../..

      - name: Verify Infrastructure Health
        run: |
          echo "🧪 Waiting for Kafka and Redis to be available..."
          # Give more time for all services to initialize
          sleep 30
          
          echo "📊 Infrastructure should be ready through Aspire..."
          echo "✅ Aspire manages all service health checks internally"

      - name: Run Flink.Net Standard Reliability Test with Aspire Infrastructure
        env:
          FLINKDOTNET_STANDARD_TEST_MESSAGES: ${{ env.FLINKDOTNET_STANDARD_TEST_MESSAGES }}
          DOTNET_ENVIRONMENT: "Development"
        run: |
          echo "🧪 Running Flink.Net Standard Reliability Test with ${{ env.FLINKDOTNET_STANDARD_TEST_MESSAGES }} messages..."
          echo "📊 Using Aspire-managed Kafka and Redis infrastructure"
          
          cd FlinkDotNetAspire/FlinkDotnetStandardReliabilityTest
          dotnet test --configuration Release --logger "console;verbosity=detailed" --no-build
          
          if [ $? -ne 0 ]; then
            echo "❌ Flink.Net Standard Reliability Test FAILED."
            exit 1
          fi
          
          echo "✅ Flink.Net Standard Reliability Test PASSED with Aspire infrastructure."

      - name: Stop Aspire Environment
        if: always()
        run: |
          echo "🛑 Stopping Aspire environment..."
          cd FlinkDotNetAspire/FlinkDotNetAspire.AppHost.AppHost
          if [ -f aspire.pid ]; then
            ASPIRE_PID=$(cat aspire.pid)
            if ps -p $ASPIRE_PID > /dev/null; then
              kill $ASPIRE_PID
              sleep 10
              # Force kill if still running
              if ps -p $ASPIRE_PID > /dev/null; then
                kill -9 $ASPIRE_PID
              fi
            fi
            rm aspire.pid
          fi
          echo "✅ Aspire environment cleanup complete."
