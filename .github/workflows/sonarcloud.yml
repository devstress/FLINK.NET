name: SonarCloud Analysis

on:
  push:
    branches:
      - main # Or your primary branch name
  pull_request:
    types: [synchronize]
    branches:
      - main # Or your primary branch name

concurrency:
  group: |
    ${{ github.workflow }}-${{ github.workflow_ref }}-${{
      github.event_name == 'pull_request' 
      && github.event.pull_request.number 
      || github.ref_name }}
  cancel-in-progress: true

jobs:
  build:
    name: Build and Analyze
    runs-on: windows-latest # Using windows-latest as per user's provided workflow
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17' # SonarScanner needs Java
          distribution: 'zulu'

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for SonarCloud analysis to correctly track changes

      - name: Set up .NET 8.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache # Windows specific path for SonarQube/SonarCloud scanner cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner # Local path for the SonarScanner CLI
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      # Download coverage data from unit tests workflow if available
      - name: Download Coverage Data
        if: github.event_name == 'pull_request'
        uses: actions/download-artifact@v4
        with:
          name: sonarcloud-coverage-data
          path: ./CoverageData
        continue-on-error: true

      # Install .NET Aspire workload first
      - name: Install .NET Aspire Workload
        shell: pwsh
        run: dotnet workload install aspire

      # Then restore workloads for all solutions
      - name: Restore .NET Workloads for Solutions
        shell: pwsh
        run: |
          dotnet workload restore FlinkDotNet/FlinkDotNet.sln
          dotnet workload restore FlinkDotNetAspire/FlinkDotNetAspire.sln
          dotnet workload restore FlinkDotNet.WebUI/FlinkDotNet.WebUI.sln

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # For PR decoration and SonarCloud <-> GitHub integration
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}    # Your generated SonarCloud token
        shell: pwsh # Using PowerShell
        run: |
            function RunCommandWithWarningCheck($command, $description) {
              Write-Host "Running $description"
              $output = & $command 2>&1

              $output | ForEach-Object { Write-Host $_ }

              if ($LASTEXITCODE -ne 0) {
                Write-Host "[FAIL] $description failed with exit code $LASTEXITCODE"
                return -1
              }
              $warnings = $output | Where-Object { $_ -match "(?i)warning " }
              if ($warnings.Count -gt 0) {
                Write-Host "[WARN] Found warning(s) in $description:"
                $warnings | ForEach-Object { Write-Host "  $_" }
              } else {
                Write-Host "[OK] $description completed successfully with no warnings."
              }

              return $warnings.Count
            }

            $beginCmd = { .\.sonar\scanner\dotnet-sonarscanner begin /k:"devstress_FLINK.NET" /o:"devstress" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.scanner.skipJreProvisioning=true /d:sonar.scanner.scanAll=false /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml,./CoverageData/**/*.opencover.xml" /d:sonar.coverage.exclusions="**/Program.cs,**/Migrations/**" }
            $exitBegin = RunCommandWithWarningCheck $beginCmd "Sonar begin"

            $exit1 = RunCommandWithWarningCheck { dotnet build FlinkDotNet/FlinkDotNet.sln } "Build FlinkDotNet"
            $exit2 = RunCommandWithWarningCheck { dotnet build FlinkDotNetAspire/FlinkDotNetAspire.sln } "Build FlinkDotNetAspire"
            $exit3 = RunCommandWithWarningCheck { dotnet build FlinkDotNet.WebUI/FlinkDotNet.WebUI.sln } "Build FlinkDotNet.WebUI"

            # List coverage data from unit tests if downloaded
            Write-Host "Coverage data from unit tests workflow:"
            if (Test-Path "./CoverageData") {
              Get-ChildItem -Path "./CoverageData" -Recurse -Filter "*.xml" | ForEach-Object {
                Write-Host "  [FROM UNIT TESTS] $($_.FullName)"
              }
            } else {
              Write-Host "  No coverage data from unit tests workflow found"
            }
            
            # Run tests with coverage collection using OpenCover format
            Write-Host "Running tests with coverage collection..."
            $exitTest = RunCommandWithWarningCheck { dotnet test FlinkDotNet/FlinkDotNet.sln --no-build --collect:"XPlat Code Coverage" --results-directory "./TestResults" --logger trx --configuration Release } "Test FlinkDotNet with coverage"
            
            # Convert coverage files to OpenCover format for SonarCloud
            Write-Host "Converting coverage to OpenCover format..."
            Get-ChildItem -Path "./TestResults" -Recurse -Filter "coverage.cobertura.xml" | ForEach-Object {
              $coberturaFile = $_.FullName
              $openCoverFile = $_.DirectoryName + "/coverage.opencover.xml"
              Write-Host "Converting $coberturaFile to $openCoverFile"
              
              # Install ReportGenerator if not already installed
              dotnet tool install --global dotnet-reportgenerator-globaltool --version 5.2.0 2>$null
              
              # Convert Cobertura to OpenCover format
              reportgenerator -reports:"$coberturaFile" -targetdir:"$($_.DirectoryName)" -reporttypes:"OpenCover" -verbosity:Info
            }
            
            # List all coverage files for debugging
            Write-Host "All coverage files found:"
            Get-ChildItem -Path "./TestResults" -Recurse -Filter "*.xml" -ErrorAction SilentlyContinue | ForEach-Object {
              Write-Host "  [SONAR BUILD] $($_.FullName)"
            }
            Get-ChildItem -Path "./CoverageData" -Recurse -Filter "*.xml" -ErrorAction SilentlyContinue | ForEach-Object {
              Write-Host "  [UNIT TESTS] $($_.FullName)"
            }

            $endCmd = { .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}" }
            $exitEnd = RunCommandWithWarningCheck $endCmd "Sonar end"

            $totalWarnings = 0
            $buildFailed = $false
            $failedProcesses = @()
            
            $results = @(
              @{Name="Sonar begin"; Exit=$exitBegin},
              @{Name="Build FlinkDotNet"; Exit=$exit1},
              @{Name="Build FlinkDotNetAspire"; Exit=$exit2},
              @{Name="Build FlinkDotNet.WebUI"; Exit=$exit3},
              @{Name="Test FlinkDotNet with coverage"; Exit=$exitTest},
              @{Name="Sonar end"; Exit=$exitEnd}
            )
            
            foreach ($result in $results) {
              if ($result.Exit -lt 0) {
                $buildFailed = $true
                $failedProcesses += $result.Name
              } elseif ($result.Exit -gt 0) {
                $totalWarnings += $result.Exit
              }
            }

            if ($buildFailed -or $exitEnd -ne 0) {
              if ($failedProcesses.Count -gt 0) {
                Write-Error "[ERROR] CI failed due to build errors in: $($failedProcesses -join ', ')"
              } else {
                Write-Error "[ERROR] CI failed due to build errors."
              }
            }

            if ($totalWarnings -gt 0) {
              Write-Error "[ERROR] Should be no warning, found warning(s)"
            } else {
              Write-Host "[OK] All builds passed with no warnings."
            }
