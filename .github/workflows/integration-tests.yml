name: Integration Tests

on:
  push:
    branches:
      - main # Or your primary branch name
  pull_request:
    branches:
      - main # Or your primary branch name
  workflow_dispatch: # Retain manual triggering

env:
  SIMULATOR_NUM_MESSAGES_CI: "500" # Number of messages for CI tests

jobs:
  run-integration-tests:
    name: Run Flink.NET Integration Tests
    runs-on: windows-latest

    defaults:
      run:
        shell: pwsh

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up .NET 9.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Install .NET Aspire Workload
        run: dotnet workload install aspire

      - name: Restore .NET Workloads for Solutions
        run: |
          dotnet workload restore FlinkDotNet/FlinkDotNet.sln
          dotnet workload restore FlinkDotNetAspire/FlinkDotNetAspire.sln
          dotnet workload restore FlinkDotNet.WebUI/FlinkDotNet.WebUI.sln

      - name: Build Solution (including Verifier)
        run: |
          echo "Building FlinkDotNetAspire solution..."
          Push-Location FlinkDotNetAspire
          dotnet build FlinkDotNetAspire.sln --configuration Release
          Pop-Location

      - name: Start .NET Aspire Application
        run: |
          echo "Starting Aspire AppHost with SIMULATOR_NUM_MESSAGES_CI=${{ env.SIMULATOR_NUM_MESSAGES_CI }}..."
          Push-Location FlinkDotNetAspire/FlinkDotNetAspire.AppHost

          echo "Generating Aspire manifest..."
          dotnet run --project FlinkDotNetAspire.AppHost.csproj --publisher manifest --output-path ../aspire-manifest.json --no-build
          Write-Host "Aspire manifest generated at ../aspire-manifest.json"

          # Start Aspire in the background. Pass SIMULATOR_NUM_MESSAGES to the environment of the process
          # Aspire AppHost will propagate this to the flinkjobsimulator if it's configured to read it.
          # Note: For Start-Process, environment variables are typically inherited or need specific setup.
          # A robust way is to ensure FlinkJobSimulator/Program.cs reads this variable.
          # For now, relying on inheritance or existing AppHost logic to pick up SIMULATOR_NUM_MESSAGES.
          # If FlinkJobSimulator's Program.cs is not reading it, it will use its internal default.
          # This might require a change in FlinkJobSimulator's Program.cs to respect SIMULATOR_NUM_MESSAGES.
          $env:SIMULATOR_NUM_MESSAGES = $env:SIMULATOR_NUM_MESSAGES_CI
          Write-Host "Environment SIMULATOR_NUM_MESSAGES set to $env:SIMULATOR_NUM_MESSAGES for Aspire AppHost process"

          Start-Process -FilePath dotnet -ArgumentList "run --project FlinkDotNetAspire.AppHost.csproj --no-launch-profile --no-build" -NoNewWindow -PassThru
          Write-Host "Waiting for Aspire AppHost to initialize..."
          Start-Sleep -Seconds 20
          Pop-Location

      - name: Parse Aspire Manifest and Set Service URLs
        run: |
          $manifestPath = "./FlinkDotNetAspire/aspire-manifest.json"
          Write-Host "Looking for Aspire manifest at $manifestPath..."

          if (-not (Test-Path $manifestPath)) {
            Write-Error "Aspire manifest not found at $manifestPath!"
            exit 1
          }

          Write-Host "Aspire manifest found. Parsing..."
          $manifestContent = Get-Content $manifestPath | ConvertFrom-Json
          if ($null -eq $manifestContent) {
            Write-Error "Failed to parse Aspire manifest JSON."
            exit 1
          }

          # Extract Redis URL
          $redisConnectionString = $manifestContent.resources.redis.connectionString
          if ($redisConnectionString) {
            Write-Host "Found Redis connection string: $redisConnectionString"
            Add-Content -Path $env:GITHUB_ENV -Value "DOTNET_REDIS_URL=$redisConnectionString"
          } else {
            Write-Warning "Redis connection string not found in manifest. Verifier might fail if it relies on it."
          }

          # Extract Kafka URL
          # Attempt common patterns: direct bootstrapServers or host/port from bindings/endpoints
          $kafkaBootstrapServers = $null
          if ($manifestContent.resources.kafka.bootstrapServers) {
            $kafkaBootstrapServers = $manifestContent.resources.kafka.bootstrapServers
          } elseif ($manifestContent.resources.kafka.bindings.default.host -and $manifestContent.resources.kafka.bindings.default.allocatedPort) {
            $kafkaHost = $manifestContent.resources.kafka.bindings.default.host
            $kafkaPort = $manifestContent.resources.kafka.bindings.default.allocatedPort
            $kafkaBootstrapServers = "$kafkaHost`:$kafkaPort"
          } elseif ($manifestContent.resources.kafka.endpoints.default.host -and $manifestContent.resources.kafka.endpoints.default.allocatedPort) {
            # Alternative if 'bindings' is not the structure, try 'endpoints'
            $kafkaHost = $manifestContent.resources.kafka.endpoints.default.host
            $kafkaPort = $manifestContent.resources.kafka.endpoints.default.allocatedPort
            $kafkaBootstrapServers = "$kafkaHost`:$kafkaPort"
          }


          if ($kafkaBootstrapServers) {
            Write-Host "Found Kafka bootstrap servers: $kafkaBootstrapServers"
            Add-Content -Path $env:GITHUB_ENV -Value "DOTNET_KAFKA_BOOTSTRAP_SERVERS=$kafkaBootstrapServers"
          } else {
            Write-Warning "Kafka bootstrap servers not found in manifest using common patterns. Verifier might fail if it relies on it."
            Write-Host "Attempted to find: \$manifestContent.resources.kafka.bootstrapServers"
            Write-Host "Attempted to find: \$manifestContent.resources.kafka.bindings.default.host / allocatedPort"
            Write-Host "Attempted to find: \$manifestContent.resources.kafka.endpoints.default.host / allocatedPort"
          }

          Write-Host "Service URL setup complete."

      - name: Health Check Loop
        env:
          DOTNET_ENVIRONMENT: "Development" # Helps Aspire resolve services if it has multiple modes
        run: |
          $maxAttempts = 10
          $delaySeconds = 15
          $verifierPath = "./FlinkDotNetAspire/IntegrationTestVerifier/bin/Release/net9.0/FlinkDotNet.IntegrationTestVerifier.exe"

          for ($attempt = 1; $attempt -le $maxAttempts; $attempt++) {
            echo "Health check attempt $attempt/$maxAttempts..."
            & $verifierPath --health-check
            if ($LASTEXITCODE -eq 0) {
              echo "Health check PASSED."
              break
            }
            echo "Health check FAILED. Waiting $delaySeconds seconds before retry..."
            Start-Sleep -Seconds $delaySeconds
            if ($attempt -eq $maxAttempts) {
              echo "Max health check attempts reached. Failing workflow."
              exit 1
            }
          }

      - name: Run Verification Tests
        env:
          # SIMULATOR_NUM_MESSAGES needs to be the same as used by the job simulator.
          SIMULATOR_NUM_MESSAGES: ${{ env.SIMULATOR_NUM_MESSAGES_CI }}
          DOTNET_ENVIRONMENT: "Development"
        run: |
          echo "Running verification tests with SIMULATOR_NUM_MESSAGES=${{ env.SIMULATOR_NUM_MESSAGES_CI }}..."
          Write-Host "DOTNET_REDIS_URL from env: $env:DOTNET_REDIS_URL"
          Write-Host "DOTNET_KAFKA_BOOTSTRAP_SERVERS from env: $env:DOTNET_KAFKA_BOOTSTRAP_SERVERS"
          $verifierPath = "./FlinkDotNetAspire/IntegrationTestVerifier/bin/Release/net9.0/FlinkDotNet.IntegrationTestVerifier.exe"
          & $verifierPath
          if ($LASTEXITCODE -ne 0) {
            echo "Verification tests FAILED."
            exit 1
          }
          echo "Verification tests PASSED."

      - name: Stop .NET Aspire Application (Best Effort)
        if: always()
        run: |
          echo "Attempting to stop .NET Aspire AppHost..."
          # Get all dotnet processes that are running the AppHost and stop them.
          # This is a bit broad but should catch the background process.
          Get-Process dotnet | Where-Object { $_.CommandLine -like "*FlinkDotNetAspire.AppHost.csproj*" } | Stop-Process -Force -ErrorAction SilentlyContinue
          echo "Cleanup: Any remaining Docker containers launched by Aspire should be managed by the runner's cleanup or manually if needed."
