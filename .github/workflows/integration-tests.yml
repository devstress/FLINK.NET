
name: Integration Tests

on:
  push:
    branches:
      - main # Or your primary branch name
  pull_request:
    branches:
      - main # Or your primary branch name
  workflow_dispatch: # Retain manual triggering

env:
  SIMULATOR_NUM_MESSAGES_CI: "1000000" # Number of messages for CI tests
  DOTNET_REDIS_URL: "localhost:6379"
  DOTNET_KAFKA_BOOTSTRAP_SERVERS: "localhost:9092"

jobs:
  run-integration-tests:
    name: Run Flink.NET Integration Tests
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: pwsh

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure Docker is running
        run: docker info

      - name: Set up .NET 8.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install .NET Aspire Workload
        run: dotnet workload install aspire

      - name: Restore .NET Workloads for Solutions
        run: |
          dotnet workload restore FlinkDotNet/FlinkDotNet.sln
          dotnet workload restore FlinkDotNetAspire/FlinkDotNetAspire.sln
          dotnet workload restore FlinkDotNet.WebUI/FlinkDotNet.WebUI.sln

      - name: Build Solutions (including Verifier)
        run: |
          echo "Building FlinkDotNetAspire solution..."
          Push-Location FlinkDotNetAspire
          dotnet build FlinkDotNetAspire.sln --configuration Release
          Pop-Location

      - name: Start Aspire AppHost
        run: |
          $env:SIMULATOR_NUM_MESSAGES='${{ env.SIMULATOR_NUM_MESSAGES_CI }}'
          $env:ASPIRE_ALLOW_UNSECURED_TRANSPORT='true'
          $proc = Start-Process "dotnet" "run --no-build --configuration Release --project FlinkDotNetAspire/FlinkDotNetAspire.AppHost.AppHost/FlinkDotNetAspire.AppHost.AppHost.csproj" -RedirectStandardOutput apphost.out.log -RedirectStandardError apphost.err.log -PassThru
          $proc.Id | Out-File apphost.pid
          Start-Sleep -Seconds 30


      # The AppHost binds Redis and Kafka to default ports. The environment
      # variables above provide the localhost connection strings for the tests.
      - name: Health Check Loop
        env:
          DOTNET_ENVIRONMENT: "Development" # Helps Aspire resolve services if it has multiple modes
          DOTNET_REDIS_URL: localhost:6379
          DOTNET_KAFKA_BOOTSTRAP_SERVERS: localhost:9092
        run: |
          $maxAttempts = 10
          $delaySeconds = 15
          $verifierDll = "./FlinkDotNetAspire/IntegrationTestVerifier/bin/Release/net8.0/FlinkDotNet.IntegrationTestVerifier.dll"

          for ($attempt = 1; $attempt -le $maxAttempts; $attempt++) {
            echo "Health check attempt $attempt/$maxAttempts..."
            & dotnet $verifierDll --health-check
            if ($LASTEXITCODE -eq 0) {
              echo "Health check PASSED."
              break
            }
            echo "Health check FAILED. Waiting $delaySeconds seconds before retry..."
            Start-Sleep -Seconds $delaySeconds
            if ($attempt -eq $maxAttempts) {
              echo "Max health check attempts reached. Failing workflow."
              exit 1
            }
          }

      - name: Run Verification Tests
        env:
          # SIMULATOR_NUM_MESSAGES needs to be the same as used by the job simulator.
          SIMULATOR_NUM_MESSAGES: ${{ env.SIMULATOR_NUM_MESSAGES_CI }}
          DOTNET_ENVIRONMENT: "Development"
          DOTNET_REDIS_URL: localhost:6379
          DOTNET_KAFKA_BOOTSTRAP_SERVERS: localhost:9092
        run: |
          echo "Running verification tests with SIMULATOR_NUM_MESSAGES=${{ env.SIMULATOR_NUM_MESSAGES_CI }}..."
          Write-Host "DOTNET_REDIS_URL from env: $env:DOTNET_REDIS_URL"
          Write-Host "DOTNET_KAFKA_BOOTSTRAP_SERVERS from env: $env:DOTNET_KAFKA_BOOTSTRAP_SERVERS"
          $verifierDll = "./FlinkDotNetAspire/IntegrationTestVerifier/bin/Release/net8.0/FlinkDotNet.IntegrationTestVerifier.dll"
          & dotnet $verifierDll
          if ($LASTEXITCODE -ne 0) {
            echo "Verification tests FAILED."
            exit 1
          }
          echo "Verification tests PASSED."

      - name: Stop Aspire AppHost
        if: always()
        run: |
          if (Test-Path apphost.pid) {
            $apphostPid = Get-Content apphost.pid
            Write-Host "Stopping AppHost with PID $apphostPid"
            Stop-Process -Id $apphostPid -Force -ErrorAction SilentlyContinue
            Write-Host "apphost.out.log contents:"; Get-Content apphost.out.log -Raw
          }
          Write-Host "AppHost cleanup complete."
