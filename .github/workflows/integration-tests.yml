
name: Integration Tests

on:
  push:
    branches:
      - main # Or your primary branch name
  pull_request:
    types: [synchronize]
    branches:
      - main # Or your primary branch name
  workflow_dispatch: # Retain manual triggering

concurrency:
  group: |
    ${{ github.workflow }}-${{ github.workflow_ref }}-${{
      github.event_name == 'pull_request' 
      && github.event.pull_request.number 
      || github.ref_name }}
  cancel-in-progress: true

env:
  SIMULATOR_NUM_MESSAGES_CI: "1000000" # Number of messages for CI tests - reduced for faster execution
  DOTNET_REDIS_URL: "localhost:6379"
  DOTNET_KAFKA_BOOTSTRAP_SERVERS: "localhost:9092"
  MAX_ALLOWED_TIME_MS: "10000" # 10 seconds timeout for processing

jobs:
  run-integration-tests:
    name: Run Flink.NET Integration Tests
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: pwsh

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure Docker is running
        run: docker info

      - name: Set up .NET 8.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install .NET Aspire Workload
        run: dotnet workload install aspire

      - name: Restore .NET Workloads for Solutions
        run: |
          dotnet workload restore FlinkDotNet/FlinkDotNet.sln
          dotnet workload restore FlinkDotNetAspire/FlinkDotNetAspire.sln
          dotnet workload restore FlinkDotNet.WebUI/FlinkDotNet.WebUI.sln

      - name: Build Solutions (including Verifier)
        run: |
          echo "Building FlinkDotNet solution (dependency)..."
          Push-Location FlinkDotNet
          dotnet build FlinkDotNet.sln --configuration Release
          Pop-Location
          
          echo "Building FlinkDotNetAspire solution..."
          Push-Location FlinkDotNetAspire
          dotnet build FlinkDotNetAspire.sln --configuration Release
          Pop-Location

      - name: Start Aspire AppHost
        run: |
          $env:SIMULATOR_NUM_MESSAGES='${{ env.SIMULATOR_NUM_MESSAGES_CI }}'
          $env:ASPIRE_ALLOW_UNSECURED_TRANSPORT='true'
          
          # Start AppHost process with output redirection to files
          $arguments = @(
            'run',
            '--no-build',
            '--configuration', 'Release',
            '--project', 'FlinkDotNetAspire/FlinkDotNetAspire.AppHost.AppHost/FlinkDotNetAspire.AppHost.AppHost.csproj'
          )
          
          # Start process and redirect output to files directly
          $psi = New-Object System.Diagnostics.ProcessStartInfo
          $psi.FileName = 'dotnet'
          $psi.Arguments = $arguments -join ' '
          $psi.WorkingDirectory = $PWD
          $psi.UseShellExecute = $false
          $psi.RedirectStandardOutput = $true
          $psi.RedirectStandardError = $true
          $psi.CreateNoWindow = $true
          
          # Create log files
          $outLogPath = Join-Path $PWD "apphost.out.log"
          $errLogPath = Join-Path $PWD "apphost.err.log"
          "" | Out-File $outLogPath -Encoding utf8
          "" | Out-File $errLogPath -Encoding utf8
          
          # Start the process
          $proc = [System.Diagnostics.Process]::Start($psi)
          $proc.Id | Out-File apphost.pid -Encoding utf8
          
          Write-Host "Started AppHost with PID: $($proc.Id)"
          
          # Start background jobs to continuously read and log output
          $outputJob = Start-Job -ScriptBlock {
            param($processId, $logPath)
            try {
              $process = Get-Process -Id $processId -ErrorAction SilentlyContinue
              if ($null -eq $process) { 
                Write-Host "[OUTPUT JOB] Process not found: $processId"
                return 
              }
              
              Write-Host "[OUTPUT JOB] Starting to read stdout for process $processId"
              $reader = $process.StandardOutput
              
              while (-not $process.HasExited) {
                try {
                  if ($reader.Peek() -ge 0) {
                    $line = $reader.ReadLine()
                    if ($null -ne $line -and $line.Trim() -ne "") {
                      Add-Content -Path $logPath -Value $line -Encoding utf8 -Force
                      Write-Host "[STDOUT] $line"
                    }
                  }
                  Start-Sleep -Milliseconds 100
                  $process.Refresh()
                } catch {
                  Write-Host "[OUTPUT JOB] Read error: $_"
                  break
                }
              }
              
              # Read any remaining output
              try {
                while ($reader.Peek() -ge 0) {
                  $line = $reader.ReadLine()
                  if ($null -ne $line -and $line.Trim() -ne "") {
                    Add-Content -Path $logPath -Value $line -Encoding utf8 -Force
                    Write-Host "[STDOUT] $line"
                  }
                }
              } catch {
                Write-Host "[OUTPUT JOB] Final read error: $_"
              }
              
              Write-Host "[OUTPUT JOB] Finished reading stdout"
            } catch {
              Write-Host "[OUTPUT JOB ERROR] $_"
            }
          } -ArgumentList $proc.Id, $outLogPath
          
          $errorJob = Start-Job -ScriptBlock {
            param($processId, $logPath)
            try {
              $process = Get-Process -Id $processId -ErrorAction SilentlyContinue
              if ($null -eq $process) { 
                Write-Host "[ERROR JOB] Process not found: $processId"
                return 
              }
              
              Write-Host "[ERROR JOB] Starting to read stderr for process $processId"
              $reader = $process.StandardError
              
              while (-not $process.HasExited) {
                try {
                  if ($reader.Peek() -ge 0) {
                    $line = $reader.ReadLine()
                    if ($null -ne $line -and $line.Trim() -ne "") {
                      Add-Content -Path $logPath -Value $line -Encoding utf8 -Force
                      Write-Host "[STDERR] $line"
                    }
                  }
                  Start-Sleep -Milliseconds 100
                  $process.Refresh()
                } catch {
                  Write-Host "[ERROR JOB] Read error: $_"
                  break
                }
              }
              
              # Read any remaining output
              try {
                while ($reader.Peek() -ge 0) {
                  $line = $reader.ReadLine()
                  if ($null -ne $line -and $line.Trim() -ne "") {
                    Add-Content -Path $logPath -Value $line -Encoding utf8 -Force
                    Write-Host "[STDERR] $line"
                  }
                }
              } catch {
                Write-Host "[ERROR JOB] Final read error: $_"
              }
              
              Write-Host "[ERROR JOB] Finished reading stderr"
            } catch {
              Write-Host "[ERROR JOB ERROR] $_"
            }
          } -ArgumentList $proc.Id, $errLogPath
          
          $outputJob.Id | Out-File apphost.output.job -Encoding utf8
          $errorJob.Id | Out-File apphost.error.job -Encoding utf8
          
          Write-Host "Background jobs started - OutputJob: $($outputJob.Id), ErrorJob: $($errorJob.Id)"
          Write-Host "AppHost started, waiting 30 seconds for initialization..."
          Start-Sleep -Seconds 30


      # The AppHost binds Redis and Kafka to default ports. The environment
      # variables above provide the localhost connection strings for the tests.
      - name: Health Check Loop
        env:
          DOTNET_ENVIRONMENT: "Development" # Helps Aspire resolve services if it has multiple modes
          DOTNET_REDIS_URL: localhost:6379
          DOTNET_KAFKA_BOOTSTRAP_SERVERS: localhost:9092
        run: |
          $maxAttempts = 2
          $delaySeconds = 5
          $verifierDll = "./FlinkDotNetAspire/IntegrationTestVerifier/bin/Release/net8.0/FlinkDotNet.IntegrationTestVerifier.dll"

          for ($attempt = 1; $attempt -le $maxAttempts; $attempt++) {
            echo "Health check attempt $attempt/$maxAttempts..."
            & dotnet $verifierDll --health-check
            if ($LASTEXITCODE -eq 0) {
              echo "Health check PASSED."
              break
            }
            echo "Health check FAILED. Waiting $delaySeconds seconds before retry..."
            Start-Sleep -Seconds $delaySeconds
            if ($attempt -eq $maxAttempts) {
              echo "Max health check attempts reached. Failing workflow."
              exit 1
            }
          }

      - name: Run Verification Tests
        env:
          # SIMULATOR_NUM_MESSAGES needs to be the same as used by the job simulator.
          SIMULATOR_NUM_MESSAGES: ${{ env.SIMULATOR_NUM_MESSAGES_CI }}
          DOTNET_ENVIRONMENT: "Development"
          DOTNET_REDIS_URL: localhost:6379
          DOTNET_KAFKA_BOOTSTRAP_SERVERS: localhost:9092
          MAX_ALLOWED_TIME_MS: ${{ env.MAX_ALLOWED_TIME_MS }}
        run: |
          # Check if AppHost is still running
          if (Test-Path apphost.pid) {
            $apphostPid = Get-Content apphost.pid
            $process = Get-Process -Id $apphostPid -ErrorAction SilentlyContinue
            if (-not $process) {
              Write-Host "ERROR: AppHost process (PID $apphostPid) is not running!"
              exit 1
            }
            Write-Host "AppHost process (PID $apphostPid) is running."
          } else {
            Write-Host "ERROR: AppHost PID file not found!"
            exit 1
          }

          echo "Running verification tests with SIMULATOR_NUM_MESSAGES=${{ env.SIMULATOR_NUM_MESSAGES_CI }}..."
          Write-Host "DOTNET_REDIS_URL from env: $env:DOTNET_REDIS_URL"
          Write-Host "DOTNET_KAFKA_BOOTSTRAP_SERVERS from env: $env:DOTNET_KAFKA_BOOTSTRAP_SERVERS"
          $verifierDll = "./FlinkDotNetAspire/IntegrationTestVerifier/bin/Release/net8.0/FlinkDotNet.IntegrationTestVerifier.dll"
          & dotnet $verifierDll
          if ($LASTEXITCODE -ne 0) {
            echo "Verification tests FAILED."
            exit 1
          }
          echo "Verification tests PASSED."

      - name: Stop Aspire AppHost
        if: always()
        run: |
          Write-Host "=================== STOPPING APPHOST ==================="
          
          # Stop background logging jobs first and wait for them to finish
          if (Test-Path apphost.output.job) {
            $outputJobId = Get-Content apphost.output.job
            Write-Host "Stopping output job: $outputJobId"
            $outputJob = Get-Job -Id $outputJobId -ErrorAction SilentlyContinue
            if ($outputJob) {
              Write-Host "Output job state: $($outputJob.State)"
              Stop-Job -Id $outputJobId -ErrorAction SilentlyContinue
              # Wait for job to finish processing
              Wait-Job -Id $outputJobId -Timeout 5 -ErrorAction SilentlyContinue
              Remove-Job -Id $outputJobId -ErrorAction SilentlyContinue
            }
          }
          
          if (Test-Path apphost.error.job) {
            $errorJobId = Get-Content apphost.error.job
            Write-Host "Stopping error job: $errorJobId"
            $errorJob = Get-Job -Id $errorJobId -ErrorAction SilentlyContinue
            if ($errorJob) {
              Write-Host "Error job state: $($errorJob.State)"
              Stop-Job -Id $errorJobId -ErrorAction SilentlyContinue
              # Wait for job to finish processing
              Wait-Job -Id $errorJobId -Timeout 5 -ErrorAction SilentlyContinue
              Remove-Job -Id $errorJobId -ErrorAction SilentlyContinue
            }
          }
          
          # Wait a moment for all file writes to complete
          Write-Host "Waiting for file writes to complete..."
          Start-Sleep -Seconds 3
          
          # Stop AppHost process
          if (Test-Path apphost.pid) {
            $apphostPid = Get-Content apphost.pid
            Write-Host "Stopping AppHost with PID $apphostPid"
            
            # Check if process is still running
            $process = Get-Process -Id $apphostPid -ErrorAction SilentlyContinue
            if ($process) {
              Write-Host "Process is running, stopping it..."
              Stop-Process -Id $apphostPid -Force -ErrorAction SilentlyContinue
              Start-Sleep -Seconds 2
            } else {
              Write-Host "Process was already stopped."
            }
            
            # Print apphost.pid content after stopping
            Write-Host "apphost.pid content after stopping:"
            Get-Content apphost.pid
          } else {
            Write-Host "No AppHost PID file found."
          }
          
          # Force one more file system sync
          Start-Sleep -Seconds 1
          
          Write-Host "=================== APPHOST OUTPUT LOG ==================="
          if (Test-Path apphost.out.log) {
            $outSize = (Get-Item apphost.out.log).Length
            Write-Host "apphost.out.log size: $outSize bytes"
            
            if ($outSize -gt 0) {
              $outContent = Get-Content apphost.out.log -Raw -ErrorAction SilentlyContinue
              if ($outContent -and $outContent.Trim()) {
                Write-Host $outContent
              } else {
                Write-Host "apphost.out.log has content but appears empty when read"
                # Try reading line by line
                $lines = Get-Content apphost.out.log -ErrorAction SilentlyContinue
                if ($lines) {
                  Write-Host "Reading line by line:"
                  $lines | ForEach-Object { Write-Host $_ }
                } else {
                  Write-Host "No lines could be read from apphost.out.log"
                }
              }
            } else {
              Write-Host "apphost.out.log exists but is empty"
            }
          } else {
            Write-Host "No apphost.out.log found"
          }
          
          Write-Host "=================== APPHOST ERROR LOG ==================="
          if (Test-Path apphost.err.log) {
            $errSize = (Get-Item apphost.err.log).Length
            Write-Host "apphost.err.log size: $errSize bytes"
            
            if ($errSize -gt 0) {
              $errContent = Get-Content apphost.err.log -Raw -ErrorAction SilentlyContinue
              if ($errContent -and $errContent.Trim()) {
                Write-Host $errContent
              } else {
                Write-Host "apphost.err.log has content but appears empty when read"
                # Try reading line by line
                $lines = Get-Content apphost.err.log -ErrorAction SilentlyContinue
                if ($lines) {
                  Write-Host "Reading line by line:"
                  $lines | ForEach-Object { Write-Host $_ }
                } else {
                  Write-Host "No lines could be read from apphost.err.log"
                }
              }
            } else {
              Write-Host "apphost.err.log exists but is empty"
            }
          } else {
            Write-Host "No apphost.err.log found"
          }
          
          Write-Host "=================== DEBUG INFO ==================="
          Write-Host "Current directory files:"
          Get-ChildItem -Filter "apphost*" | ForEach-Object {
            Write-Host "  $($_.Name) - Size: $($_.Length) bytes, LastWrite: $($_.LastWriteTime)"
          }
          
          # Check if we can see any running PowerShell jobs
          Write-Host "Remaining PowerShell jobs:"
          Get-Job | ForEach-Object {
            Write-Host "  Job $($_.Id): $($_.Name) - State: $($_.State)"
          }
          
          Write-Host "AppHost cleanup complete."
