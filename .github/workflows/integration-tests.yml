name: Integration Tests

on:
  push:
    branches:
      - main # Or your primary branch name
  pull_request:
    branches:
      - main # Or your primary branch name
  workflow_dispatch: # Retain manual triggering

env:
  SIMULATOR_NUM_MESSAGES_CI: "1000000" # Number of messages for CI tests

jobs:
  run-integration-tests:
    name: Run Flink.NET Integration Tests
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: pwsh

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify Docker is available
        run: docker version

      - name: Set up .NET 8.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install .NET Aspire Workload
        run: dotnet workload install aspire

      - name: Restore .NET Workloads for Solutions
        run: |
          dotnet workload restore FlinkDotNet/FlinkDotNet.sln
          dotnet workload restore FlinkDotNetAspire/FlinkDotNetAspire.sln
          dotnet workload restore FlinkDotNet.WebUI/FlinkDotNet.WebUI.sln

      - name: Build Solution (including Verifier)
        run: |
          echo "Building FlinkDotNetAspire solution..."
          Push-Location FlinkDotNetAspire
          dotnet build FlinkDotNetAspire.sln --configuration Release
          Pop-Location

      - name: Start .NET Aspire Application
        shell: bash
        run: |
          echo "Starting Aspire AppHost with SIMULATOR_NUM_MESSAGES_CI=${SIMULATOR_NUM_MESSAGES_CI}..."
          pushd FlinkDotNetAspire/FlinkDotNetAspire.AppHost

          echo "Generating Aspire manifest..."
          dotnet publish FlinkDotNetAspire.AppHost.csproj --configuration Release -p:IsPublishable=true -p:AspireManifestPublishOutputPath=../publish -t:GenerateAspireManifest
          cp ../publish/manifest.json ../aspire-manifest.json
          echo "Aspire manifest generated at ../aspire-manifest.json"

          export SIMULATOR_NUM_MESSAGES="$SIMULATOR_NUM_MESSAGES_CI"
          export ASPIRE_ALLOW_UNSECURED_TRANSPORT=true
          export ASPNETCORE_URLS=http://localhost:5199
          export DOTNET_DASHBOARD_OTLP_ENDPOINT_URL=http://localhost:4317

          nohup dotnet run --project FlinkDotNetAspire.AppHost.csproj --no-launch-profile --no-build -c Release > ../../aspire-apphost.log 2> ../../aspire-apphost.err.log &
          echo $! > ../../aspire-apphost.pid
          echo "Aspire AppHost started with PID $(cat ../../aspire-apphost.pid)"
          popd
          echo "Waiting for Aspire AppHost to initialize..."
          sleep 30


      # The AppHost binds Redis and Kafka to their default ports so the verifier
      # can use localhost addresses directly. Expose these connection strings to
      # later steps via environment variables.
      - name: Set Service URLs
        run: |
          Add-Content -Path $env:GITHUB_ENV -Value "DOTNET_REDIS_URL=localhost:6379"
          Add-Content -Path $env:GITHUB_ENV -Value "DOTNET_KAFKA_BOOTSTRAP_SERVERS=localhost:9092"

      - name: Health Check Loop
        env:
          DOTNET_ENVIRONMENT: "Development" # Helps Aspire resolve services if it has multiple modes
          DOTNET_REDIS_URL: localhost:6379
          DOTNET_KAFKA_BOOTSTRAP_SERVERS: localhost:9092
        run: |
          $maxAttempts = 10
          $delaySeconds = 15
          $verifierDll = "./FlinkDotNetAspire/IntegrationTestVerifier/bin/Release/net8.0/FlinkDotNet.IntegrationTestVerifier.dll"

          for ($attempt = 1; $attempt -le $maxAttempts; $attempt++) {
            echo "Health check attempt $attempt/$maxAttempts..."
            & dotnet $verifierDll --health-check
            if ($LASTEXITCODE -eq 0) {
              echo "Health check PASSED."
              break
            }
            echo "Health check FAILED. Waiting $delaySeconds seconds before retry..."
            Start-Sleep -Seconds $delaySeconds
            if ($attempt -eq $maxAttempts) {
              echo "Max health check attempts reached. Failing workflow."
              exit 1
            }
          }

      - name: Run Verification Tests
        env:
          # SIMULATOR_NUM_MESSAGES needs to be the same as used by the job simulator.
          SIMULATOR_NUM_MESSAGES: ${{ env.SIMULATOR_NUM_MESSAGES_CI }}
          DOTNET_ENVIRONMENT: "Development"
          DOTNET_REDIS_URL: localhost:6379
          DOTNET_KAFKA_BOOTSTRAP_SERVERS: localhost:9092
        run: |
          echo "Running verification tests with SIMULATOR_NUM_MESSAGES=${{ env.SIMULATOR_NUM_MESSAGES_CI }}..."
          Write-Host "DOTNET_REDIS_URL from env: $env:DOTNET_REDIS_URL"
          Write-Host "DOTNET_KAFKA_BOOTSTRAP_SERVERS from env: $env:DOTNET_KAFKA_BOOTSTRAP_SERVERS"
          $verifierDll = "./FlinkDotNetAspire/IntegrationTestVerifier/bin/Release/net8.0/FlinkDotNet.IntegrationTestVerifier.dll"
          & dotnet $verifierDll
          if ($LASTEXITCODE -ne 0) {
            echo "Verification tests FAILED."
            exit 1
          }
          echo "Verification tests PASSED."

      - name: Stop .NET Aspire Application (Best Effort)
        if: always()
        shell: bash
        run: |
          echo "Attempting to stop .NET Aspire AppHost..."
          if [ -f aspire-apphost.pid ]; then
            kill $(cat aspire-apphost.pid) || true
          fi
          pkill -f "FlinkDotNetAspire.AppHost.csproj" || true
          echo "Cleanup complete."
