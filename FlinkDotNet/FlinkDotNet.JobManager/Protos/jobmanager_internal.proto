syntax = "proto3";

option csharp_namespace = "FlinkDotNet.Proto.Internal";

package FlinkDotNet.Proto;

service JobManagerInternalService {
  rpc ReportStateCompletion (ReportStateCompletionRequest) returns (ReportStateCompletionReply);
  rpc RequestCheckpoint (RequestCheckpointRequest) returns (RequestCheckpointReply);
  rpc RequestRecovery (RequestRecoveryRequest) returns (RequestRecoveryReply);
  rpc Heartbeat (JobManagerHeartbeatRequest) returns (JobManagerHeartbeatReply);
}

message ReportStateCompletionRequest {
  int64 checkpoint_id = 1;
  string operator_instance_id = 2;
  string state_location = 3;
  map<string, int64> input_offsets = 4;
}

message ReportStateCompletionReply {
  bool ack = 1;
}

message RequestCheckpointRequest {
  int64 checkpoint_id = 1;
}

message RequestCheckpointReply {
  bool accepted = 1;
}

message RequestRecoveryRequest {
  string job_id = 1;
  int64 checkpoint_id = 2;
}

message RequestRecoveryReply {
  bool recovery_initiated = 1;
}

message JobManagerHeartbeatRequest {
  string job_id = 1;
  string operator_instance_id = 2;
  string health_status = 3;
  map<string, double> metrics = 4;
}

message JobManagerHeartbeatReply {
  bool ack = 1;
}

service TaskManagerRegistration {
  rpc RegisterTaskManager (RegisterTaskManagerRequest) returns (RegisterTaskManagerResponse);
  rpc SendHeartbeat (HeartbeatRequest) returns (HeartbeatResponse);
  rpc AcknowledgeCheckpoint(AcknowledgeCheckpointRequest) returns (AcknowledgeCheckpointResponse);
}

message RegisterTaskManagerRequest {
  string taskManagerId = 1;
  string address = 2;
  int32 port = 3;
}

message RegisterTaskManagerResponse {
  bool success = 1;
  string jobManagerId = 2;
}

message HeartbeatRequest {
  string taskManagerId = 1;
}

message HeartbeatResponse {
  bool acknowledged = 1;
}

message CheckpointTaskInfo {
    string taskManagerId = 1;
    string snapshotPath = 2;
}

message TriggerCheckpointRequest {
    string jobManagerId = 1;
    string jobId = 2;
    int64 checkpointId = 3;
    int64 checkpointTimestamp = 4;
}

message TriggerCheckpointResponse {
    bool acknowledged = 1;
}

message AcknowledgeCheckpointRequest {
    string jobManagerId = 1;
    string jobId = 2;
    int64 checkpointId = 3;
    string taskManagerId = 4;
    string jobVertexId = 5;
    int32 subtaskIndex = 6;
    string snapshotHandle = 7;
    map<string, int64> source_offsets = 8;
    uint64 snapshotSize = 9;
    uint64 duration = 10;
}

message AcknowledgeCheckpointResponse {
    bool success = 1;
}

service TaskManagerCheckpointing {
  rpc TriggerTaskCheckpoint (TriggerCheckpointRequest) returns (TriggerCheckpointResponse);
}

message OperatorInput {
    string sourceVertexId = 1;
    string upstream_job_vertex_id = 2;
    int32 upstream_subtask_index = 3;
}

message OperatorOutput {
    string targetVertexId = 1;
    string target_task_endpoint = 2;
    int32 target_specific_subtask_index = 3;
}

message OutputEdgeKeyingInfo {
  string target_job_vertex_id = 1;
  string serialized_key_selector = 2;
  string key_type_name = 3;
  int32 downstream_parallelism = 4;
}

message InputKeyingInfo {
  string serialized_key_selector = 1;
  string key_type_name = 2;
}

message ChainedOperatorInfo {
  string original_job_vertex_id = 1;
  string fully_qualified_operator_name = 2;
  bytes operator_configuration = 3;
  string input_type_name = 4;
  string output_type_name = 5;
}

message TaskDeploymentDescriptor {
    string jobGraphJobId = 1;
    string jobVertexId = 2;
    int32 subtaskIndex = 3;
    string taskName = 4;

    string fullyQualifiedOperatorName = 5;
    bytes operatorConfiguration = 6;
    string inputTypeName = 9;
    string outputTypeName = 10;
    string inputSerializerTypeName = 11;
    string outputSerializerTypeName = 12;

    repeated OperatorInput inputs = 7;
    repeated OperatorOutput outputs = 8;

    repeated OutputEdgeKeyingInfo output_keying_info = 13;

    bool is_recovery = 14;
    int64 recovery_checkpoint_id = 15;
    string recovery_snapshot_handle = 16;
    map<string, int64> recovery_source_offsets = 17;

    repeated InputKeyingInfo input_keying_info = 18;
    repeated ChainedOperatorInfo chained_operator_info = 19;
}

message DeployTaskResponse {
    bool success = 1;
    string message = 2;
}

service TaskExecution {
  rpc DeployTask (TaskDeploymentDescriptor) returns (DeployTaskResponse);
}

message CheckpointBarrier {
  int64 checkpoint_id = 1;
  int64 checkpoint_timestamp = 2;
}

message DataRecord {
    string targetJobVertexId = 1;
    int32 targetSubtaskIndex = 2;

    string source_job_vertex_id = 5;
    int32 source_subtask_index = 6;

    oneof payload_type {
      bytes data_payload = 3;
      CheckpointBarrier barrier_payload = 4;
    }
}

// New messages for credit-based flow control
message UpstreamPayload {
  oneof payload_oneof {
    DataRecord record = 1;
    // Could add other upstream messages like EndOfStreamMarker, etc.
  }
}

message CreditUpdate {
  int32 credits_granted = 1;
}

message DownstreamPayload {
  oneof payload_oneof {
    CreditUpdate credits = 1;
    // Could add other downstream messages like Ack, error reports, etc.
  }
}

// DataAck is removed as it's no longer used by the new DataExchangeService.

// Modified DataExchangeService for full duplex communication
service DataExchangeService {
  rpc ExchangeData (stream UpstreamPayload) returns (stream DownstreamPayload);
}
